# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."gluetun" = {
    image = "qmcgaw/gluetun";
    environment = {
      "OPENVPN_PASSWORD" = config.sops.secrets."pia-password".path;
      "OPENVPN_USER" = config.sops.secrets."pia-username".path;
      "OPENVPN_VERSION" = "2.5";
      "PRIVATE_INTERNET_ACCESS_VPN_PORT_FORWARDING" = "on";
      "PRIVATE_INTERNET_ACCESS_VPN_PORT_FORWARDING_STATUS_FILE" = "/gluetun/forwarded_port";
      "SERVER_REGIONS" = "CA Montreal";
      "VPN_PORT_FORWARDING" = "on";
      "VPN_SERVICE_PROVIDER" = "private internet access";
    };
    volumes = [
      "/home/users/pixls/gluetun:/gluetun:rw"
    ];
    ports = [
      "8112:8112/tcp"
      "6881:6881/tcp"
      "6881:6881/udp"
      "58846:58846/tcp"
      "8989:8989/tcp"
      "7878:7878/tcp"
      "8686:8686/tcp"
      "8787:8787/tcp"
      "9696:9696/tcp"
      "8191:8191/tcp"
      "6767:6767/tcp"
      "8082:8082/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=gluetun"
      "--network=gluetun_default"
    ];
  };
  systemd.services."podman-gluetun" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-gluetun_default.service"
    ];
    requires = [
      "podman-network-gluetun_default.service"
    ];
    partOf = [
      "podman-compose-gluetun-root.target"
    ];
    wantedBy = [
      "podman-compose-gluetun-root.target"
    ];
  };
  virtualisation.oci-containers.containers."gluetun-qbittorrent-portfw" = {
    image = "charlocharlie/qbittorrent-port-forward-file:latest";
    environment = {
      "PORT_FILE" = "/config/forwarded_port";
      "QBT_ADDR" = "http://192.168.1.12:8080";
      "QBT_PASSWORD" = config.sops.secrets."qbittorrent".path;
      "QBT_USERNAME" = "pixls";
    };
    volumes = [
      "/mnt/Apps/Docker/gluetun:/config:ro"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=qbittorrent-port"
      "--network=gluetun_default"
    ];
  };
  systemd.services."podman-gluetun-qbittorrent-portfw" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-gluetun_default.service"
    ];
    requires = [
      "podman-network-gluetun_default.service"
    ];
    partOf = [
      "podman-compose-gluetun-root.target"
    ];
    wantedBy = [
      "podman-compose-gluetun-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-gluetun_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f gluetun_default";
    };
    script = ''
      podman network inspect gluetun_default || podman network create gluetun_default
    '';
    partOf = [ "podman-compose-gluetun-root.target" ];
    wantedBy = [ "podman-compose-gluetun-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-gluetun-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
