# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."bazarr" = {
    image = "lscr.io/linuxserver/bazarr:latest";
    environment = {
      "PGID" = "950";
      "PUID" = "950";
      "TZ" = "America/New_York";
    };
    volumes = [
      "/home/pixls/servarr/bazarr:/config:rw"
      "/mnt/snack-pool:/snack-share:rw"
    ];
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."podman-bazarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-servarr-root.target"
    ];
    wantedBy = [
      "podman-compose-servarr-root.target"
    ];
  };
  virtualisation.oci-containers.containers."lidarr" = {
    image = "lscr.io/linuxserver/lidarr:latest";
    environment = {
      "PGID" = "950";
      "PUID" = "950";
      "TZ" = "\"America/New York\"";
    };
    volumes = [
      "/home/pixls/servarr/lidarr:/config:rw"
      "/mnt/snack-pool:/snack-share:rw"
    ];
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."podman-lidarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-servarr-root.target"
    ];
    wantedBy = [
      "podman-compose-servarr-root.target"
    ];
  };
  virtualisation.oci-containers.containers."radarr" = {
    image = "lscr.io/linuxserver/radarr:latest";
    environment = {
      "PGID" = "950";
      "PUID" = "950";
      "TZ" = "\"America/New York\"";
    };
    volumes = [
      "/home/pixls/servarr/radarr:/config:rw"
      "/mnt/snack-pool:/snack-share:rw"
    ];
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."podman-radarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-servarr-root.target"
    ];
    wantedBy = [
      "podman-compose-servarr-root.target"
    ];
  };
  virtualisation.oci-containers.containers."sonarr" = {
    image = "lscr.io/linuxserver/sonarr:latest";
    environment = {
      "PGID" = "950";
      "PUID" = "950";
      "TZ" = "\"America/New York\"";
    };
    volumes = [
      "/home/pixls/servarr/sonarr:/config:rw"
      "/mnt/snack-pool:/snack-share:rw"
    ];
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."podman-sonarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-servarr-root.target"
    ];
    wantedBy = [
      "podman-compose-servarr-root.target"
    ];
  };
  virtualisation.oci-containers.containers."unpackerr" = {
    image = "golift/unpackerr";
    environment = {
      "PGID" = "950";
      "PUID" = "950";
      "TZ" = "America/New_York";
      "UN_LOG_FILE" = "/downloads/unpackerr.log";
      "UN_RADARR_0_API_KEY" = config.sops.secrets."radarr-key".path;
      "UN_RADARR_0_URL" = "http://192.168.1.12:7878";
      "UN_SONARR_0_API_KEY" = config.sops.secrets."sonarr-key".path;
      "UN_SONARR_0_URL" = "http://192.168.1.12:8989";
    };
    volumes = [
      "/mnt/snack-pool/downloads:/downloads:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=unpackerr"
      "--network=servarr_default"
    ];
  };
  systemd.services."podman-unpackerr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-servarr_default.service"
    ];
    requires = [
      "podman-network-servarr_default.service"
    ];
    partOf = [
      "podman-compose-servarr-root.target"
    ];
    wantedBy = [
      "podman-compose-servarr-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-servarr_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f servarr_default";
    };
    script = ''
      podman network inspect servarr_default || podman network create servarr_default
    '';
    partOf = [ "podman-compose-servarr-root.target" ];
    wantedBy = [ "podman-compose-servarr-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-servarr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
