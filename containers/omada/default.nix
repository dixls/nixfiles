# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking = {
    firewall = {
      allowedUDPPorts = [ 29810 19810 ];
      allowedTCPPorts = [
        8088
        8043
        29811
        29812
        29813
        29814
        29815
        29816
      ];
    };
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."omada-controller" = {
    image = "mbentley/omada-controller:latest";
    autoStart = true;
    environment = {
      "MANAGE_HTTPS_PORT" = "8043";
      "MANAGE_HTTP_PORT" = "8088";
      "PORTAL_HTTPS_PORT" = "8843";
      "PORTAL_HTTP_PORT" = "8088";
      "PORT_ADOPT_V1" = "29812";
      "PORT_APP_DISCOVERY" = "27001";
      "PORT_DISCOVERY" = "29810";
      "PORT_MANAGER_V1" = "29811";
      "PORT_MANAGER_V2" = "29814";
      "PORT_RTTY" = "29816";
      "PORT_TRANSFER_V2" = "29815";
      "PORT_UPGRADE_V1" = "29813";
      "SHOW_MONGODB_LOGS" = "false";
      "SHOW_SERVER_LOGS" = "true";
      "SSL_CERT_NAME" = "tls.crt";
      "SSL_KEY_NAME" = "tls.key";
      "TZ" = "etc/UTC";
    };
    volumes = [
      "/home/pixls/omada/omada-data:/opt/tplink/EAPController/data:rw"
      "/home/pixls/omada/omada-logs:/opt/tplink/EAPController/logs:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=host"
    ];
  };
  systemd.services."podman-omada-controller" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-omada-controller-root.target"
    ];
    wantedBy = [
      "podman-compose-omada-controller-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-omada-controller-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
