# Set up the prompt

autoload -Uz promptinit
autoload -Uz vcs_info
promptinit
# shows cross bones on error
if [[ $HOST == sweet ]]
then
  PROMPT='%(?.%F{green}🍩.%F{red}🫗%?)%f %B%F{blue}%1~%f%b %# '
elif [[ $HOST == savory ]]
then
  PROMPT='%(?.%F{green}🍟.%F{red}🫗%?)%f %B%F{blue}%1~%f%b %# '
elif [[ $HOST == gideon ]]
then
  PROMPT='%(?.%F{green}😎.%F{red}🫗%?)%f %B%F{blue}%1~%f%b %# '
elif [[ $HOST == mercymorn ]]
then
  PROMPT='%(?.%F{green}🎀.%F{red}🫗%?)%f %B%F{blue}%1~%f%b %# '
else
  PROMPT='%(?.%F{green}💀.%F{red}☠️%?)%f %B%F{blue}%1~%f%b %# '
fi
setopt prompt_subst

# git info function adapted from Josh Dick - https://joshdick.net/2017/06/08/my_git_prompt_for_zsh_revisited.html
git_info() {

  # Exit if not inside a Git repository
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head
  local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}

  local AHEAD="%{%F{red}%}⇡NUM%{$reset_color%}"
  local BEHIND="%{%F{cyan}%}⇣NUM%{$reset_color%}"
  local MERGING="%{%F{magenta}%}⚡︎%{$reset_color%}"
  local UNTRACKED="%{%F{red}%}●%{$reset_color%}"
  local MODIFIED="%{%F{yellow}%}●%{$reset_color%}"
  local STAGED="%{%F{green}%}●%{$reset_color%}"

  local -a DIVERGENCES
  local -a FLAGS

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    FLAGS+=( "$MERGING" )
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    FLAGS+=( "$UNTRACKED" )
  fi

  if ! git diff --quiet 2> /dev/null; then
    FLAGS+=( "$MODIFIED" )
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    FLAGS+=( "$STAGED" )
  fi

  local -a GIT_INFO
  GIT_INFO+=( "%{\033[38;5;15m%}" )
  [ -n "$GIT_STATUS" ] && GIT_INFO+=( "$GIT_STATUS" )
  [[ ${#DIVERGENCES[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
  [[ ${#FLAGS[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)FLAGS}" )
  GIT_INFO+=( "%{\033[38;5;15m%}%F{8}$GIT_LOCATION%{$reset_color%}" )
  echo "${(j::)GIT_INFO}"

}

RPROMPT='$(git_info) %F{white}%*'

setopt histignorealldups sharehistory
setopt AUTO_CD

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

# set ls to ls -p so i see trailing / on dirs
alias ls='eza'
alias nv='nvim'
# set default fetch
alias fetch='fastfetch --load-config paleofetch'

setopt CORRECT

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
# eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# PATH="/opt/homebrew/bin:$PATH"
# eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"

export NVM_DIR="$HOME/.nvm"
export PYENV_ROOT="$HOME/.pyenv"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
export PATH="/usr/local/mysql/bin:$PATH"
eval "$(pyenv init -)"
export PATH="/snap/bin:$PATH"
